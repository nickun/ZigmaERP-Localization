<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddToOrgUnitWorkflow" xml:space="preserve">
    <value>/ Add to Contact company workflow</value>
  </data>
  <data name="AddToParentProject" xml:space="preserve">
    <value>/ Add to Parent project workflow</value>
  </data>
  <data name="AddToParentWorkflow" xml:space="preserve">
    <value>/ Move to Parent object workflow</value>
  </data>
  <data name="AddToProjectWorkflow" xml:space="preserve">
    <value>/ Add to Project workflow</value>
  </data>
  <data name="Control" xml:space="preserve">
    <value>Control</value>
  </data>
  <data name="Culture" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="CustomProjectType" xml:space="preserve">
    <value>Project type</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="DatasourceType" xml:space="preserve">
    <value>Data source type</value>
  </data>
  <data name="DatasourceType_Hint" xml:space="preserve">
    <value>Limit data loading from the server
to focused, all selected or all visible objects</value>
  </data>
  <data name="DocumentTemplate" xml:space="preserve">
    <value>Document template</value>
  </data>
  <data name="DocumentTemplate_Email" xml:space="preserve">
    <value>Document template for email</value>
  </data>
  <data name="FileNameFormat" xml:space="preserve">
    <value>File name format</value>
  </data>
  <data name="FileNameFormat_Hint" xml:space="preserve">
    <value>{0} – Report name
{1} – Localized report name
{2} – Current date, ex: {2:yyyyMMdd}
{3} – Project number
{4} – (Transaction) Entry number
{5} – Work order number
{6:languageKey} – Report localized string
{7} - Invoice number
{8} - Company name
{9:propertyName} - Property of current object
{10} - Parent project numbers
{11} - (Transaction) Entry invoice no
{12:propertyName} - Project property name</value>
  </data>
  <data name="FileNameFormatPreview" xml:space="preserve">
    <value>File name preview</value>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>Is active</value>
  </data>
  <data name="IsDefault" xml:space="preserve">
    <value>Is default</value>
  </data>
  <data name="LastEditDate" xml:space="preserve">
    <value>Last edited date</value>
  </data>
  <data name="LimitDataSources" xml:space="preserve">
    <value>Limit tables</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PrinterName" xml:space="preserve">
    <value>Printer name</value>
  </data>
  <data name="ShowInQuickPrint" xml:space="preserve">
    <value>Show in Quick print button</value>
  </data>
  <data name="Template" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="UseContextCulture" xml:space="preserve">
    <value>Use language from Contact company</value>
  </data>
  <data name="User_LastEdit" xml:space="preserve">
    <value>Last edited by</value>
  </data>
  <data name="WorkflowItemSubtype" xml:space="preserve">
    <value>Workflow subtype</value>
  </data>
  <data name="WorkflowItemSubtype_Email" xml:space="preserve">
    <value>Workflow subtype for email</value>
  </data>
  <data name="EmailSubjectFormat" xml:space="preserve">
    <value>Email subject format</value>
  </data>
  <data name="EmailSubjectFormatPreview" xml:space="preserve">
    <value>Email subject preview</value>
  </data>
  <data name="EmailSubjectFormat_Hint" xml:space="preserve">
    <value>{0} – Report name
{1} – Localized report name
{2} – Current date, ex: {2:yyyyMMdd H:mm:ss}
{3} – Project number
{4} – (Transaction) Entry number
{5} – Work order number
{6:languageKey} – Report localized string
{7} - Invoice number
{8} - Company name
{9:propertyName} - Property of current object
{10} - Parent project numbers
{11} - (Transaction) Entry invoice no
{12:propertyName} - Project property name</value>
  </data>
  <data name="ReportTrackType" xml:space="preserve">
    <value>Log in workflow</value>
  </data>
  <data name="AddToOrgUnitWorkflow_Hint" xml:space="preserve">
    <value>The report will be added to the company workflow and kept in the current object workflow. 
The company is taken from a context project</value>
  </data>
  <data name="AddToParentProject_Hint" xml:space="preserve">
    <value>Report will be added to the parent(s) of the context project workflow and kept in the current object workflow. 
For example reports for purchase project lines come into sales projects workflow</value>
  </data>
  <data name="AddToParentWorkflow_Hint" xml:space="preserve">
    <value>The report will be saved to the parent workflow but not in the current object workflow:
Project line -&gt;Project
Document line -&gt;Document;
Work order -&gt;Project line;
Operation -&gt;Work order;
Contact person -&gt;Company.
</value>
  </data>
  <data name="AddToProjectWorkflow_Hint" xml:space="preserve">
    <value>The report will be added to the context project workflow and kept in the current object workflow. 
The context project is taken from:
- Project line;
- Work order;
- Operation;
- Document;
- Document line.</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="DrillDownLevels" xml:space="preserve">
    <value>Drill down levels</value>
  </data>
  <data name="DrillDownLevels_Hint" xml:space="preserve">
    <value>How many iteration should be done in [document - project - document - ...] chain</value>
  </data>
  <data name="ControlTitle" xml:space="preserve">
    <value>Control title</value>
  </data>
  <data name="IsNoteExists" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="NotePlainText" xml:space="preserve">
    <value>Note plain text</value>
  </data>
  <data name="Note" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="_Id" xml:space="preserve">
    <value>_Id</value>
  </data>
  <data name="SaveToCompanyWF" xml:space="preserve">
    <value>Save to Company workflow</value>
  </data>
  <data name="SaveToCurrentObjectWF" xml:space="preserve">
    <value>Save to Current object workflow</value>
  </data>
  <data name="SaveToDocumentWF" xml:space="preserve">
    <value>Save to Document workflow</value>
  </data>
  <data name="SaveToParentProjectWF" xml:space="preserve">
    <value>Save to Parent project workflow</value>
  </data>
  <data name="SaveToProjectLineWF" xml:space="preserve">
    <value>Save to Project line workflow</value>
  </data>
  <data name="SaveToProjectWF" xml:space="preserve">
    <value>Save to Project workflow</value>
  </data>
  <data name="SaveToWorkOrderWF" xml:space="preserve">
    <value>Save to Work order workflow</value>
  </data>
  <data name="SaveToArticleWF" xml:space="preserve">
    <value>Save to Article workflow</value>
  </data>
  <data name="BarCodeString" xml:space="preserve">
    <value>Barcode</value>
  </data>
</root>